{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\redwh\\\\Desktop\\\\\\uAC1C\\uBC1C\\\\stock\\\\stock-table\\\\front\\\\src\\\\components\\\\StockTable.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StockTable = ({\n  stocks\n}) => {\n  if (stocks.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: \"\\uD45C\\uC2DC\\uD560 \\uB370\\uC774\\uD130\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 3,\n      columnNumber: 16\n    }, this);\n  }\n  const years = [\"2021\", \"2022\", \"2023\", \"2024\"];\n  const financialKeys = [\"매출액\", \"영업이익\", \"영업이익률\", \"순이익률\", \"EPS\", \"PER\", \"PBR\", \"주당배당금\", \"시가배당률\"];\n  const unitMap = {\n    \"EPS\": \"(원)\",\n    \"PER\": \"(배)\",\n    \"PBR\": \"(배)\",\n    \"주당배당금\": \"(원)\",\n    \"시가배당률\": \"(%)\",\n    \"영업이익률\": \"(%)\",\n    \"순이익률\": \"(%)\"\n  };\n  const cleanValue = (value, key) => {\n    if (!value || value === \"-\" || value === \"N/A\" || value === \"\") return \"N/A\";\n    const numericValue = parseFloat(value.toString().replace(/,/g, \"\"));\n\n    // 매출액과 영업이익은 조 단위와 억 단위로 표시\n    if (key === \"매출액\" || key === \"영업이익\") {\n      const trillionPart = Math.floor(numericValue / 10000); // 조 단위\n      const billionPart = numericValue % 10000; // 억 단위\n\n      if (trillionPart > 0) {\n        return `${trillionPart}조 ${billionPart}억`;\n      }\n      return `${billionPart}억`; // 억 단위만 있을 경우\n    }\n\n    // 비율 값(%)\n    if (key === \"영업이익률\" || key === \"순이익률\" || key === \"시가배당률\") {\n      return `${numericValue}%`;\n    }\n\n    // 원 단위\n    if (key === \"EPS\" || key === \"주당배당금\") {\n      return `${numericValue}원`;\n    }\n\n    // 배 단위\n    if (key === \"PER\" || key === \"PBR\") {\n      return `${numericValue}배`;\n    }\n    return value.toString().replace(/,/g, \"\"); // 기본값: 쉼표 제거 후 반환\n  };\n  const transformedData = financialKeys.map(key => {\n    const rowData = {\n      key\n    };\n    years.forEach(year => {\n      const columnNameWithUnit = `${year}.12 ${key}${unitMap[key] || \"\"}`;\n      const columnNameWithoutUnit = `${year}.12 ${key}`;\n      const value = columnNameWithUnit in stocks[0] ? stocks[0][columnNameWithUnit] : columnNameWithoutUnit in stocks[0] ? stocks[0][columnNameWithoutUnit] : \"N/A\";\n      rowData[year] = cleanValue(value, key);\n    });\n    return rowData;\n  });\n  console.log(\"Transformed Data for Row-Based Table:\", transformedData);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"table-container\",\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"\\uD56D\\uBAA9\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 25\n          }, this), years.map((year, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: year\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: transformedData.map((row, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: row.key\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 29\n          }, this), years.map((year, idx) => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: row[year]\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 33\n          }, this))]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n};\n_c = StockTable;\nexport default StockTable;\nvar _c;\n$RefreshReg$(_c, \"StockTable\");","map":{"version":3,"names":["StockTable","stocks","length","_jsxDEV","className","children","fileName","_jsxFileName","lineNumber","columnNumber","years","financialKeys","unitMap","cleanValue","value","key","numericValue","parseFloat","toString","replace","trillionPart","Math","floor","billionPart","transformedData","map","rowData","forEach","year","columnNameWithUnit","columnNameWithoutUnit","console","log","index","row","idx","_c","$RefreshReg$"],"sources":["C:/Users/redwh/Desktop/개발/stock/stock-table/front/src/components/StockTable.jsx"],"sourcesContent":["const StockTable = ({ stocks }) => {\r\n    if (stocks.length === 0) {\r\n        return <p className=\"error-message\">표시할 데이터가 없습니다.</p>;\r\n    }\r\n\r\n    const years = [\"2021\", \"2022\", \"2023\", \"2024\"];\r\n    const financialKeys = [\r\n        \"매출액\",\r\n        \"영업이익\",\r\n        \"영업이익률\",\r\n        \"순이익률\",\r\n        \"EPS\",\r\n        \"PER\",\r\n        \"PBR\",\r\n        \"주당배당금\",\r\n        \"시가배당률\",\r\n    ];\r\n\r\n    const unitMap = {\r\n        \"EPS\": \"(원)\",\r\n        \"PER\": \"(배)\",\r\n        \"PBR\": \"(배)\",\r\n        \"주당배당금\": \"(원)\",\r\n        \"시가배당률\": \"(%)\",\r\n        \"영업이익률\": \"(%)\",\r\n        \"순이익률\": \"(%)\",\r\n    };\r\n\r\n    const cleanValue = (value, key) => {\r\n        if (!value || value === \"-\" || value === \"N/A\" || value === \"\") return \"N/A\";\r\n\r\n        const numericValue = parseFloat(value.toString().replace(/,/g, \"\"));\r\n\r\n        // 매출액과 영업이익은 조 단위와 억 단위로 표시\r\n        if (key === \"매출액\" || key === \"영업이익\") {\r\n            const trillionPart = Math.floor(numericValue / 10000); // 조 단위\r\n            const billionPart = numericValue % 10000; // 억 단위\r\n\r\n            if (trillionPart > 0) {\r\n                return `${trillionPart}조 ${billionPart}억`;\r\n            }\r\n            return `${billionPart}억`; // 억 단위만 있을 경우\r\n        }\r\n\r\n        // 비율 값(%)\r\n        if (key === \"영업이익률\" || key === \"순이익률\" || key === \"시가배당률\") {\r\n            return `${numericValue}%`;\r\n        }\r\n\r\n        // 원 단위\r\n        if (key === \"EPS\" || key === \"주당배당금\") {\r\n            return `${numericValue}원`;\r\n        }\r\n\r\n        // 배 단위\r\n        if (key === \"PER\" || key === \"PBR\") {\r\n            return `${numericValue}배`;\r\n        }\r\n\r\n        return value.toString().replace(/,/g, \"\"); // 기본값: 쉼표 제거 후 반환\r\n    };\r\n\r\n    const transformedData = financialKeys.map((key) => {\r\n        const rowData = { key };\r\n\r\n        years.forEach((year) => {\r\n            const columnNameWithUnit = `${year}.12 ${key}${unitMap[key] || \"\"}`;\r\n            const columnNameWithoutUnit = `${year}.12 ${key}`;\r\n            const value =\r\n                columnNameWithUnit in stocks[0]\r\n                    ? stocks[0][columnNameWithUnit]\r\n                    : columnNameWithoutUnit in stocks[0]\r\n                    ? stocks[0][columnNameWithoutUnit]\r\n                    : \"N/A\";\r\n\r\n            rowData[year] = cleanValue(value, key);\r\n        });\r\n\r\n        return rowData;\r\n    });\r\n\r\n    console.log(\"Transformed Data for Row-Based Table:\", transformedData);\r\n\r\n    return (\r\n        <div className=\"table-container\">\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>항목</th>\r\n                        {years.map((year, index) => (\r\n                            <th key={index}>{year}</th>\r\n                        ))}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {transformedData.map((row, index) => (\r\n                        <tr key={index}>\r\n                            <td>{row.key}</td>\r\n                            {years.map((year, idx) => (\r\n                                <td key={idx}>{row[year]}</td>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default StockTable;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}