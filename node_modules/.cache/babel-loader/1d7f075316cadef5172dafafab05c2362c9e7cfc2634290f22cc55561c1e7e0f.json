{"ast":null,"code":"import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const StockTable=_ref=>{let{stocks}=_ref;if(stocks.length===0){return/*#__PURE__*/_jsx(\"p\",{className:\"error-message\",children:\"\\uD45C\\uC2DC\\uD560 \\uB370\\uC774\\uD130\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"});}const years=[\"2021\",\"2022\",\"2023\",\"2024\"];const financialKeys=[\"매출액\",\"영업이익\",\"영업이익률\",\"순이익률\",\"EPS\",\"PER\",\"PBR\",\"주당배당금\",\"시가배당률\"];const unitMap={\"EPS\":\"(원)\",\"PER\":\"(배)\",\"PBR\":\"(배)\",\"주당배당금\":\"(원)\",\"시가배당률\":\"(%)\",\"영업이익률\":\"(%)\",\"순이익률\":\"(%)\"};const cleanValue=(value,key)=>{if(!value||value===\"-\"||value===\"N/A\"||value===\"\")return\"N/A\";const numericValue=parseFloat(value.toString().replace(/,/g,\"\"));// 매출액과 영업이익은 조 단위와 억 단위로 표시\nif(key===\"매출액\"||key===\"영업이익\"){const trillionPart=Math.floor(numericValue/10000);// 조 단위\nconst billionPart=numericValue%10000;// 억 단위\nif(trillionPart>0){return\"\".concat(trillionPart,\"\\uC870 \").concat(billionPart,\"\\uC5B5\");}return\"\".concat(billionPart,\"\\uC5B5\");// 억 단위만 있을 경우\n}// 비율 값(%)\nif(key===\"영업이익률\"||key===\"순이익률\"||key===\"시가배당률\"){return\"\".concat(numericValue,\"%\");}// 원 단위\nif(key===\"EPS\"||key===\"주당배당금\"){return\"\".concat(numericValue,\"\\uC6D0\");}// 배 단위\nif(key===\"PER\"||key===\"PBR\"){return\"\".concat(numericValue,\"\\uBC30\");}return value.toString().replace(/,/g,\"\");// 기본값: 쉼표 제거 후 반환\n};const transformedData=financialKeys.map(key=>{const rowData={key};years.forEach(year=>{const columnNameWithUnit=\"\".concat(year,\".12 \").concat(key).concat(unitMap[key]||\"\");const columnNameWithoutUnit=\"\".concat(year,\".12 \").concat(key);const value=columnNameWithUnit in stocks[0]?stocks[0][columnNameWithUnit]:columnNameWithoutUnit in stocks[0]?stocks[0][columnNameWithoutUnit]:\"N/A\";rowData[year]=cleanValue(value,key);});return rowData;});console.log(\"Transformed Data for Row-Based Table:\",transformedData);return/*#__PURE__*/_jsx(\"div\",{className:\"table-container\",children:/*#__PURE__*/_jsxs(\"table\",{children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"\\uD56D\\uBAA9\"}),years.map((year,index)=>/*#__PURE__*/_jsx(\"th\",{children:year},index))]})}),/*#__PURE__*/_jsx(\"tbody\",{children:transformedData.map((row,index)=>/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:row.key}),years.map((year,idx)=>/*#__PURE__*/_jsx(\"td\",{children:row[year]},idx))]},index))})]})});};export default StockTable;","map":{"version":3,"names":["StockTable","_ref","stocks","length","_jsx","className","children","years","financialKeys","unitMap","cleanValue","value","key","numericValue","parseFloat","toString","replace","trillionPart","Math","floor","billionPart","concat","transformedData","map","rowData","forEach","year","columnNameWithUnit","columnNameWithoutUnit","console","log","_jsxs","index","row","idx"],"sources":["C:/Users/redwh/Desktop/개발/stock/stock-table/src/components/StockTable.jsx"],"sourcesContent":["const StockTable = ({ stocks }) => {\r\n    if (stocks.length === 0) {\r\n        return <p className=\"error-message\">표시할 데이터가 없습니다.</p>;\r\n    }\r\n\r\n    const years = [\"2021\", \"2022\", \"2023\", \"2024\"];\r\n    const financialKeys = [\r\n        \"매출액\",\r\n        \"영업이익\",\r\n        \"영업이익률\",\r\n        \"순이익률\",\r\n        \"EPS\",\r\n        \"PER\",\r\n        \"PBR\",\r\n        \"주당배당금\",\r\n        \"시가배당률\",\r\n    ];\r\n\r\n    const unitMap = {\r\n        \"EPS\": \"(원)\",\r\n        \"PER\": \"(배)\",\r\n        \"PBR\": \"(배)\",\r\n        \"주당배당금\": \"(원)\",\r\n        \"시가배당률\": \"(%)\",\r\n        \"영업이익률\": \"(%)\",\r\n        \"순이익률\": \"(%)\",\r\n    };\r\n\r\n    const cleanValue = (value, key) => {\r\n        if (!value || value === \"-\" || value === \"N/A\" || value === \"\") return \"N/A\";\r\n\r\n        const numericValue = parseFloat(value.toString().replace(/,/g, \"\"));\r\n\r\n        // 매출액과 영업이익은 조 단위와 억 단위로 표시\r\n        if (key === \"매출액\" || key === \"영업이익\") {\r\n            const trillionPart = Math.floor(numericValue / 10000); // 조 단위\r\n            const billionPart = numericValue % 10000; // 억 단위\r\n\r\n            if (trillionPart > 0) {\r\n                return `${trillionPart}조 ${billionPart}억`;\r\n            }\r\n            return `${billionPart}억`; // 억 단위만 있을 경우\r\n        }\r\n\r\n        // 비율 값(%)\r\n        if (key === \"영업이익률\" || key === \"순이익률\" || key === \"시가배당률\") {\r\n            return `${numericValue}%`;\r\n        }\r\n\r\n        // 원 단위\r\n        if (key === \"EPS\" || key === \"주당배당금\") {\r\n            return `${numericValue}원`;\r\n        }\r\n\r\n        // 배 단위\r\n        if (key === \"PER\" || key === \"PBR\") {\r\n            return `${numericValue}배`;\r\n        }\r\n\r\n        return value.toString().replace(/,/g, \"\"); // 기본값: 쉼표 제거 후 반환\r\n    };\r\n\r\n    const transformedData = financialKeys.map((key) => {\r\n        const rowData = { key };\r\n\r\n        years.forEach((year) => {\r\n            const columnNameWithUnit = `${year}.12 ${key}${unitMap[key] || \"\"}`;\r\n            const columnNameWithoutUnit = `${year}.12 ${key}`;\r\n            const value =\r\n                columnNameWithUnit in stocks[0]\r\n                    ? stocks[0][columnNameWithUnit]\r\n                    : columnNameWithoutUnit in stocks[0]\r\n                    ? stocks[0][columnNameWithoutUnit]\r\n                    : \"N/A\";\r\n\r\n            rowData[year] = cleanValue(value, key);\r\n        });\r\n\r\n        return rowData;\r\n    });\r\n\r\n    console.log(\"Transformed Data for Row-Based Table:\", transformedData);\r\n\r\n    return (\r\n        <div className=\"table-container\">\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>항목</th>\r\n                        {years.map((year, index) => (\r\n                            <th key={index}>{year}</th>\r\n                        ))}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {transformedData.map((row, index) => (\r\n                        <tr key={index}>\r\n                            <td>{row.key}</td>\r\n                            {years.map((year, idx) => (\r\n                                <td key={idx}>{row[year]}</td>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default StockTable;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}